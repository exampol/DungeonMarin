@using BlazorD.Client.Models
<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content" style="min-width:600px;">
            <div class="modal-header">
                <h5 class="modal-title">Equipaggiamento</h5>
            </div>
            <div class="modal-body">
                <div style="width:100%; height:100%; max-height:360px; overflow-y:scroll">
                    @for (int i = 0; i < lstOggettiUtilizzabili.Count; i++) {
                        int SavedCounter = i;
                        <button @onclick="() => UseItem(SavedCounter)">@lstOggettiUtilizzabili[i].Name</button>
                    }
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => OK()">OK</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Annulla</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop) {
    <div class="modal-backdrop fade show"></div>
}


@code {
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public List<Item> lstOggettiSelezionati = new List<Item>();
    List<Item> lstOggettiUtilizzabili = new List<Item>();
    private bool bCombat = false;

    private bool bCancelled = false;
    private CancellationTokenSource CloseToken;

    public async Task<bool> Open(bool bCombat) {
        lstOggettiSelezionati = new List<Item>();
        if (bCombat) lstOggettiUtilizzabili = Global.availableItems.Where(x => x.UsableInCombat).ToList();
        else lstOggettiUtilizzabili = Global.availableItems.Where(x => x.UsableOutOfCombat).ToList();

        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();

        try {
            using (CloseToken = new()) {
                await Task.Delay(-1, CloseToken.Token);
            }
        } catch (TaskCanceledException) { } // we want to cancel it.

        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
        return !bCancelled;
    }

    public void Close() { bCancelled = true; CloseToken.Cancel(); }

    public void OK() {
        Global.availableItems.RemoveAll(x => lstOggettiSelezionati.Select(x => x.ID).Contains(x.ID));

        bCancelled = false;
        CloseToken.Cancel();
    }

    public void UseItem(int iIndex) {
        Item toUse = lstOggettiUtilizzabili[iIndex];

        // Disequipaggio il corrente e lo metto dopo quello che equipaggerò
        lstOggettiSelezionati.Add(toUse);

        // Equipaggio il nuovo
        lstOggettiUtilizzabili.RemoveAt(iIndex);
        StateHasChanged();
    }
}